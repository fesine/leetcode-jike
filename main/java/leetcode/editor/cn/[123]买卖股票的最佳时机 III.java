package leetcode.editor.cn;
//给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
//
// 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。 
//
// 注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。 
//
// 示例 1: 
//
// 输入: [3,3,5,0,0,3,1,4]
//输出: 6
//解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
//     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。 
//
// 示例 2: 
//
// 输入: [1,2,3,4,5]
//输出: 4
//解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   
//     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   
//     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
// 
//
// 示例 3: 
//
// 输入: [7,6,4,3,1] 
//输出: 0 
//解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。 
// Related Topics 数组 动态规划 
// 👍 528 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class MaxProfit3 {
    public int maxProfit(int[] prices) {
        int len = prices.length;
        if (len <= 1) {
            return 0;
        }
        /**
         * 下标为 0 这一天，交易次数为 0、1、2 并且状态为 0 和 1 的初值应该如下设置：
         *
         * dp[0][0][0] = 0：这是显然的；
         * dp[0][0][1]：表示一次交易都没有发生，但是持股，这是不可能的，也不会有后序的决策要用到这个状态值，可以不用管；
         * dp[0][1][0] = 0：表示发生了 1 次交易，但是不持股，这是不可能的。虽然没有意义，但是设置成 0 不会影响最优值；
         * dp[0][1][1] = -prices[0]：表示发生了一次交易，并且持股，所以我们持有的现金数就是当天股价的相反数；
         * dp[0][2][0] = 0：表示发生了 2 次交易，但是不持股，这是不可能的。虽然没有意义，但是设置成 0 不会影响最优值；
         * dp[0][2][1] = 负无穷：表示发生了 2 次交易，但是不持股，这是不可能的。注意：虽然没有意义，但是不能设置成 0，
         * 这是因为交易还没有发生，必须规定当天 k
         * 状态为 1（持股），需要参考以往的状态转移，一种很有可能的情况是没有交易是最好的情况。
         * 说明：dp[0][2][1] 设置成为负无穷这件事情我可能没有说清楚。大家可以通过特殊测试用例 [1, 2, 3, 4, 5]，
         * 对比 dp[0][2][1] = 0 与
         * dp[0][2][1] = 负无穷 的状态转移的差异去理解。
         *
         * 注意：只有在之前的状态有被赋值的时候，才可能有当前状态。
         *
         * 思考输出：最后一天不持股的状态都可能成为最大利润。
         */

        //定义三维数组，
        // 第一维表示股票天数，
        // 第二维表示交易次数，0无意义，记录1和2的情况
        // 第三维表示是否持股0表示不持股，1表示持股
        // 第 2 维的 0 没有意义，1 表示交易进行了 1 次，2 表示交易进行了 2 次
        // 为了使得第 2 维的数值 1 和 2 有意义，这里将第 2 维的长度设置为 3
        int[][][] dp = new int[len][3][2];
        // 理解如下初始化
        // 第 3 维规定了必须持股，因此是 -prices[0]
        dp[0][1][1] = -prices[0];
        // 还没发生的交易，持股的时候应该初始化为负无穷
        dp[0][2][1] = Integer.MIN_VALUE;
        for (int i = 1; i < len; i++) {
            // 转移顺序先持股，再卖出
            dp[i][1][1] = Math.max(dp[i - 1][1][1], -prices[i]);
            dp[i][1][0] = Math.max(dp[i - 1][1][0], dp[i - 1][1][1] + prices[i]);
            dp[i][2][1] = Math.max(dp[i - 1][2][1], dp[i - 1][1][0] - prices[i]);
            dp[i][2][0] = Math.max(dp[i - 1][2][0], dp[i - 1][2][1] + prices[i]);
        }
        return Math.max(dp[len - 1][1][0], dp[len - 1][2][0]);

    }

    public static void main(String[] args) {
        int[] prices = new int[]{1, 7, 2, 3, 6, 7, 6, 7, 1, 10};
        System.out.println(new MaxProfit3().maxProfit(prices));
    }
}
//leetcode submit region end(Prohibit modification and deletion)
